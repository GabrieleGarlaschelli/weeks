openapi: 3.0.0
info:
  title: Weeks API
  description: Description of weeks API
  version: 1.0.0
# servers:
#   - url: http://api.example.com/v1
#     description: Optional server description, e.g. Main (production) server
#   - url: http://staging-api.example.com
#     description: Optional server description, e.g. Internal staging server for test
components:
  schemas:
    PaginationMeta:
      type: object
      properties:
        total: 
          type: integer
        perPage:
          type: number
        currentPage:
          type: number
    User:
      type: object
      properties:
        id: 
          type: integer
        email:
          type: string
        name:
          type: string
        rememberMeToken:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Team:
      type: object
      properties:
        id: 
          type: integer
        uid:
          type: string
          nullable: true
        name:
          type: string
        ownerId:
          type: integer
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time
    Invitation:
      type: object
      properties:
        id: 
          type: integer
        invitedByUserId:
          type: integer
        invitedUserId:
          type: integer
          nullable: true
        invitedBy:
          nullable: true
          $ref: "#/components/schemas/User"
        invitedEmail:
          type: string
        teamId:
          type: integer
        team:
          nullable: true
          $ref: "#/components/schemas/Team"
        roleId:
          type: integer
          nullable: true
        status:
          type: string
          enum:
            - pending 
            - rejected
            - accepted
            - discarded
        createdAt:
          type: string
          format: date-time
        updatedAt: 
          type: string
          format: date-time

paths:
  /auth/login:
    post:
      summary: Return a token to put in the authorization header.
      responses:
        '200':
          description: Auth token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  token:
                    type: string
                  expires_at:
                    type: string
                    format: date-time
                  expires_in:
                    type: number
    parameters:
      - name: email
        in: path
        description: The email of the user
        required: true
      - name: password
        in: path
        description: The password of the user
        required: true
  /auth/signup:
    post:
      summary: Signup and create a new user.
      responses:
        '200':
          description: New User.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
    parameters:
      - name: email
        in: path
        description: The email of the new user
        required: true
      - name: password
        in: path
        description: The password of the new user
        required: true
      - name: name
        in: path
        description: The name of the new user
        required: true
  /auth/logout:
    post:
      summary: Revoke a token for a user.
      responses:
        '200':
          description: Status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: boolean
  /users:
    get:
      summary: Returns a list of users.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      summary: Create a user.
      responses:
        '200':
          description: The new user.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /users/{userId}:
    get:
      summary: Returns a certain user.
      responses:
        '200':
          description: The user got.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
    put:
      summary: Update a certain user.
      responses:
        '200':
          description: The user got.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
  /teams:
    post:
      summary: Create a new team.
      responses:
        '200':
          description: The new team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    get:
      summary: Returns a list of teams associated to the current user.
      responses:
        '200':
          description: The teams associated to my user.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /teams/{teamId}:
    get:
      summary: Returns a certain team.
      responses:
        '200':
          description: The team.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    put:
      summary: Update a certain team.
      responses:
        '200':
          description: The team updated.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Team"
  /invitations/inviteUser:
    post:
      summary: Invite a user to a team.
      responses:
        '200':
          description: The invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: user
        in: path
        description: The user to invite
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
      - name: team
        in: path
        description: The team where the user has been invited
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
      - name: role
        in: path
        description: The role the user would be
        required: false
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/list:
    get:
      summary: Get my invitations
      responses:
        '200':
          description: The invitation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
  /invitations/accept:
    post:
      summary: Accept an invitation
      responses:
        '200':
          description: The accepted invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: path
        description: The invitation to accept
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/reject:
    post:
      summary: Reject an invitation
      responses:
        '200':
          description: The rejected invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: path
        description: The invitation to reject
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
  /invitations/discard:
    post:
      summary: Discard an invitation
      responses:
        '200':
          description: The discarded invitation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
    parameters:
      - name: invitation
        in: path
        description: The invitation to discard
        required: true
        schema:
          type: object
          properties:
            id:
              type: integer
